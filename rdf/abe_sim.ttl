@prefix ns1: <https://w3id.org/okn/o/sd#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix schema: <https://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<https://w3id.org/okn/i/Agent/muhai-project> a schema:Organization ;
    schema:name "muhai-project" .

<https://w3id.org/okn/i/Software/abe_sim> a ns1:Software ;
    schema:license <https://w3id.org/okn/i/License/abe_sim> ;
    ns1:citation "https://aclanthology.org/2024.lrec-main.3"^^xsd:anyURI ;
    ns1:contactDetails "Mihai Pomarlan: mpomarlan@yahoo.co.uk" ;
    ns1:dateCreated "2024-10-07T09:18:03+00:00"^^xsd:dateTime ;
    ns1:dateModified "2024-10-08T05:28:47+00:00"^^xsd:dateTime ;
    ns1:description "17-01-2021",
        "A little agent simulation in MORSE, to be used in a MUHAI pipeline to evaluate semspecs.",
        "A little agent simulation in PyBullet, to be used in a MUHAI pipeline to evaluate semspecs. (Very much a work in progress now.)",
        """Assuming you use a GUI, you should see the simulated environment appear in a PyBullet window; pressing g while this window is selected toggles the side panels. 
At this point the simulated agent is ready to receive commands via HTTP POST requests. Have a look at the wiki for which commands are available and what arguments they take; the flaskTests.py also contains examples on how to call most of the available commands.
 
""",
        """Build file(s) to create a Docker image for the target software 
""",
        """If the repository is a short name, we will attempt to extract the longer version of the repository name 
""",
        """Link to the code of conduct of the project 
""",
        """Links to package sites like pypi in case the repository has a package available. 
""",
        """Pointer to the available versions of a software component. For each release, somef will track its description, author, name, date of publication, date of creation, the link to the html page of the release, the id of the release and a link to the tarball zip and code of the release 
""",
        """Repository status as it is described in repostatus.org. 
""",
        """Text indicating how to contribute to this code repository 
""",
        """Total number of stargazers of the project 
""",
        """URL and path to the ontology files present in the repository, e.g., https://w3id.org/mira/ontology/ 
""",
        """URL and path to the workflow files present in the repository
 
""" ;
    ns1:hasAcknowledgments "This work was funded by the European MUHAI project (Horizon 2020 research and innovation program) under grant agreement number 951846. We thank Katrin Beuls, Paul van Eecke, Jens Nevens, Luc Steels, Robert Porzel for the insightful discussions that contributed to this work." ;
    ns1:hasDocumentation "https://github.com/mpomarlan/abe_sim/wiki"^^xsd:anyURI ;
    ns1:hasDownloadUrl "https://github.com/muhai-project/abe_sim/releases"^^xsd:anyURI ;
    ns1:hasFAQ "Frequently asked questions about a software component" ;
    ns1:hasInstallationInstructions """Links to package sites like pypi in case the repository has a package available. 
""",
        """Once you have installed pybullet and any other dependecies, and cloned the repository, you can go to the src subfolder and run
```
python runBrain.py -h
```
will print out a help message about command line parameters. To run the default scene with a GUI at the highest quality setting recommended for your OS, run
```
python runBrain.py -g
```
If instead you wish to run the scene without any graphics rendering, use
```
python runBrain.py
```
 
Assuming you use a GUI, you should see the simulated environment appear in a PyBullet window; pressing g while this window is selected toggles the side panels. 
""",
        """URL and path to the ontology files present in the repository, e.g., https://w3id.org/mira/ontology/ 
""",
        """https://github.com/muhai-project 
""" ;
    ns1:hasLongName "Acknowledgement:" ;
    ns1:hasSourceCode <https://w3id.org/okn/i/SoftwareSource/abe_sim> ;
    ns1:hasUsageNotes """##Executable examples:
Jupyter notebooks ready for execution (e.g., files, or through myBinder/colab links)##Usage examples:
Assumptions and considerations recorded by the authors when executing a software component, or examples on how to use it""" ;
    ns1:issueTracker "https://api.github.com/repos/muhai-project/abe_sim/issues"^^xsd:anyURI ;
    ns1:name "muhai-project/abe_sim" ;
    ns1:readme "https://raw.githubusercontent.com/muhai-project/abe_sim/main/README.md"^^xsd:anyURI ;
    ns1:referencePublication "https://aclanthology.org/2024.lrec-main.3"^^xsd:anyURI ;
    ns1:softwareRequirements """- flask
- numpy
- pybullet
- pyyaml
- requests
- sparqlwrapper""",
        """Python version 3.4 or newer is required.

To try the current stuff out, you will first need to [install PyBullet ](https://www.openrobots.org/morse/doc/stable/user/installation.html). For example, assuming you have pip3 as a command to install packages for a python3.4 or newer distribution, you can run:

```
sudo pip3 install pybullet
```

Installing pybullet will involve compiling the bullet library and, depending on your OS, have various dependencies. If you already do C/C++ development it is likely you have those installed already. If error messages appear during the pip install, it may be worth searching online for guides about installing pybullet. A few such guides are listed below:

- Windows: [Deepak Jogi: How to install PyBullet in Windows](https://deepakjogi.medium.com/how-to-install-pybullet-physics-simulation-in-windows-e1f16baa26f6)
- Linux: [GeeksForGeeks: How to install PyBullet in Linux](https://www.geeksforgeeks.org/how-to-install-pybullet-package-in-python-on-linux/)
- MacOS: todo

A note on running PyBullet on MacOS: we have gotten it to run fairly reliably. However, some python support is rudimentary on newer M1 chips. Proceed with lowered expectations.

Other abe_sim dependencies are python packages that are often already installed or, in any case, of lower installation complexity:

- flask
- numpy
- pyyaml
- requests
- sparqlwrapper
""" ;
    ns1:supportDetails "Guidelines and links of where to obtain support for a software component",
        "Help channels one can use to get support about the target software component" .

<https://w3id.org/okn/i/License/abe_sim> a schema:CreativeWork ;
    owl:sameAs <https://spdx.org/licenses/BSD-2-Clause> ;
    ns1:name "BSD 2-Clause \"Simplified\" License" ;
    ns1:url "https://raw.githubusercontent.com/muhai-project/abe_sim/main/LICENSE"^^xsd:anyURI .

<https://w3id.org/okn/i/SoftwareSource/abe_sim> a schema:SoftwareSourceCode ;
    ns1:codeRepository "https://github.com/muhai-project/abe_sim"^^xsd:anyURI ;
    ns1:name "muhai-project/abe_sim" ;
    ns1:programmingLanguage "Batchfile",
        "Common Lisp",
        "PDDL",
        "Python" .

